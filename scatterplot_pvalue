data <- read.table("./merge_K562_deseq_raw_norm.txt",header =T)



library(ggplot2)
library(ggpubr)

########## nts 

nt1_V_nt2.nor.cnt <- ggscatter(data, x = "norm_count_nt1_rep1", y = "norm_count_nt2_rep2",
                               add = "reg.line",  # Add regressin line
                               add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
                               conf.int = TRUE # Add confidence interval
)


nt1_V_nt2.nor.cnt <- nt1_V_nt2.nor.cnt + stat_cor(method = "pearson", 
                                                  aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
                                                  label.x = 100000, label.y = 1000000, 
                                                  color = "red"
)


nt1_V_nt2.nor.cnt <- nt1_V_nt2.nor.cnt + stat_cor(method = "pearson", aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
           label.x = 100000, label.y = 1000000, 
           color = "red")

#########
nt2_V_nt3.nor.cnt <- ggscatter(data, x = "norm_count_nt2_rep2", y = "norm_count_nt3_rep3",
                add = "reg.line",  # Add regressin line
                add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
                conf.int = TRUE # Add confidence interval
)
# Add correlation coefficient
nt2_V_nt3.nor.cnt  <- nt2_V_nt3.nor.cnt  + stat_cor(method = "pearson", aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
                                                    label.x = 1e5, label.y = 1e6, 
                                                    color = "red"
)

nt2_V_nt3.nor.cnt <- nt2_V_nt3.nor.cnt +
  scale_x_continuous(labels = scales::scientific_format(scale = 1e5)) +
  scale_y_continuous(labels = scales::scientific_format(scale = 1e5))

##########
nt1_V_nt3.nor.cnt <- ggscatter(data, x = "norm_count_nt1_rep1", y = "norm_count_nt3_rep3",
                               add = "reg.line",  # Add regressin line
                               add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
                               conf.int = TRUE # Add confidence interval
)
# Add correlation coefficient
nt1_V_nt3.nor.cnt <- nt1_V_nt3.nor.cnt  + stat_cor(method = "pearson", aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
                                                   label.x = 100000, label.y = 1000000, 
                                                   color = "red"
)

nt1_V_nt3.nor.cnt <- nt1_V_nt3.nor.cnt +
  scale_x_continuous(labels = scales::scientific_format(scale = 1e5)) +
  scale_y_continuous(labels = scales::scientific_format(scale = 1e5))

########## e13

e13.1_V_e13.2.nor.cnt <- ggscatter(data, x = "raw_count_e13_rep1", y = "norm_count_nt3_rep3",
                               add = "reg.line",  # Add regressin line
                               add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
                               conf.int = TRUE # Add confidence interval
)
# Add correlation coefficient
nt1_V_nt3.nor.cnt <- nt1_V_nt3.nor.cnt  + stat_cor(method = "pearson", aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
                                                   label.x = 100000, label.y = 1000000, 
                                                   color = "red"
)

nt1_V_nt3.nor.cnt <- nt1_V_nt3.nor.cnt +
  scale_x_continuous(labels = scales::scientific_format(scale = 1e5)) +
  scale_y_continuous(labels = scales::scientific_format(scale = 1e5))


######### arrange 
arranged_plots <- ggarrange(nt1_V_nt2.nor.cnt, nt1_V_nt3.nor.cnt,nt2_V_nt3.nor.cnt,ncol = 3, nrow = 1)
arranged_plots
#### exporting 1500 - 400 (without maintaing ratio)


##################### looping for plot 

# Assuming your data frame is named merged_df.rpm.fin
# Specify the pairs of columns for scatter plots
column_pairs <- list(c("house_nt1_k562", "men_K562_WT_1"),
                     c("house_nt2_k562", "men_K562_WT_2"),
                     c("house_nt3_k562", "men_K562_WT_3"),
                     c("house_E13_1","men_K562_ZSWIM8_KO_7"),
                     c("house_E13_2","men_K562_ZSWIM8_KO_8"),
                     c("house_E13_3", "men_K562_ZSWIM8 KO_10"))

# Create a list to store scatter plots
scatter_plots <- list()

# Loop through the column pairs
for (pair in column_pairs) {
  # Create scatter plot
  scatter_plot <- ggscatter(merged_df.rpm.fin, x = pair[1], y = pair[2],
                            add = "reg.line",
                            add.params = list(color = "blue", fill = "lightgray"),
                            conf.int = TRUE)
  
  # Add correlation statistic
  scatter_plot_stat <- scatter_plot + 
    stat_cor(method = "pearson", 
             aes(label = paste("p =", sprintf("%.3f", cor.test(merged_df.rpm.fin[[pair[1]]], merged_df.rpm.fin[[pair[2]]])$p.value))),
             label.x = 80000, label.y = 100000, color = "red")
  
  # Add the scatter plot to the list
  scatter_plots[[length(scatter_plots) + 1]] <- scatter_plot_stat
}

# Arrange and display the scatter plots
ggarrange(plotlist = scatter_plots, ncol = 3, nrow = 2)

