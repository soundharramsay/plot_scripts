
### stringties counts
stringtie_count <- read.csv("./stringtie_gene_count_matrix.csv",header = T) 
colnames(stringtie_count) <- paste("str",colnames(stringtie_count),sep=".")
colnames(stringtie_count)[1] <- "gene.id"

### salmons counts
salmon_count <- read.csv("./3_rounded_salmon.merged.gene_counts.csv",header = T) 
colnames(salmon_count) <- paste("sal",colnames(salmon_count),sep=".")
colnames(salmon_count)[1] <- "gene.id"

###FC
FC_count <- read.csv("./Feature_gene_counts.csv",header = T) 
colnames(FC_count) <- paste("FC",colnames(FC_count),sep=".")
colnames(FC_count)[1] <- "gene.id"


merged_counts <- merge(stringtie_count, salmon_count, by = "gene.id", all = TRUE)
merged_counts <- merge(merged_counts, FC_count, by = "gene.id", all = TRUE)
rownames(merged_counts) <- merged_counts$gene.id
merged_counts <- merged_counts[,-1]


merged_counts <- na.omit(merged_counts)
colnames(merged_counts)
rownames(merged_counts)

str(merged_counts)

library(ggplot2)
library(ggpubr)

# Extract required columns
btw_nts_data_str_sal <- merged_counts[, c(3, 4, 1, 2, 17:20, 33:36)]


# Convert all columns to numeric
btw_nts_data_str_sal[] <- lapply(btw_nts_data_str_sal, as.numeric)

# Check the structure of the data frame after conversion
str(btw_nts_data_str_sal)

# Specify the pairs of columns for scatter plots
btw_nt_column_pairs <- list(c("str.D12.nta", "sal.D12.nta"),
                            c("sal.D12.nta", "FC.D12.nta"),
                            c("str.D12.nta", "FC.D12.nta"))

library(ggplot2)
library(ggpubr)
library(dplyr)

# Create a list to store scatter plots
btw_nt_scatter_plots <- list()

# Loop through the column pairs
for (pair in btw_nt_column_pairs) {
  # Replace remaining 0 values with a small positive number (e.g., 0.1) for log transformation
 # btw_nt_transformed <- btw_nts_data_str_sal %>%
    #mutate(across(all_of(pair), ~ ifelse(. <= 0, 0.1, .)))
  
  # Create scatter plot
  btw_nt_scatter_plot <- ggscatter(btw_nts_data_str_sal, x = pair[1], y = pair[2],
                                   add = "reg.line",
                                   add.params = list(color = "blue", fill = "lightgray"),
                                   conf.int = TRUE) +
    scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x), 
                  labels = scales::trans_format("log10", scales::math_format(10^.x)),
                  limits = c(0.1, NA)) +  # Set limits to start from 0.1
    scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x), 
                  labels = scales::trans_format("log10", scales::math_format(10^.x)),
                  limits = c(0.1, NA))    # Set limits to start from 0.1
  
  # Compute correlation statistic for the current pair
  correlation_stat <- cor.test(btw_nts_data_str_sal[[pair[1]]], btw_nts_data_str_sal[[pair[2]]])
  cor_label <- paste("Pearson's r =", sprintf("%.3f", correlation_stat$estimate),
                     "\np =", sprintf("%.3f", correlation_stat$p.value))
  
  # Add correlation statistic to the scatter plot
  btw_nt_scatter_plot_stat <- btw_nt_scatter_plot + 
    geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +  # Add x=y line
    stat_cor(method = "pearson", 
             aes(label = cor_label),
             label.x = Inf, label.y = -Inf, 
             color = "red", 
             hjust = 1, vjust = 0)
  
  # Add the scatter plot to the list
  btw_nt_scatter_plots[[length(btw_nt_scatter_plots) + 1]] <- btw_nt_scatter_plot_stat
  
  # Print out the correlation statistic
  print(paste("Correlation statistics for", pair[1], "vs", pair[2]))
  print(correlation_stat)
}

# Arrange and display the scatter plots
ggarrange(plotlist = btw_nt_scatter_plots, ncol = 3, nrow = 1)



######################### comparing e13a vs e13b by str,sal,FC
### stringties counts
stringtie_count <- read.csv("./stringtie_gene_count_matrix.csv",header = T) 
colnames(stringtie_count) <- paste("str",colnames(stringtie_count),sep=".")
colnames(stringtie_count)[1] <- "gene.id"

### salmons counts
salmon_count <- read.csv("./3_rounded_salmon.merged.gene_counts.csv",header = T) 
colnames(salmon_count) <- paste("sal",colnames(salmon_count),sep=".")
colnames(salmon_count)[1] <- "gene.id"

###FC
FC_count <- read.csv("./Feature_gene_counts.csv",header = T) 
colnames(FC_count) <- paste("FC",colnames(FC_count),sep=".")
colnames(FC_count)[1] <- "gene.id"


merged_counts <- merge(stringtie_count, salmon_count, by = "gene.id", all = TRUE)
merged_counts <- merge(merged_counts, FC_count, by = "gene.id", all = TRUE)
rownames(merged_counts) <- merged_counts$gene.id
merged_counts <- merged_counts[,-1]


merged_counts <- na.omit(merged_counts)
colnames(merged_counts)
rownames(merged_counts)

str(merged_counts)

library(ggplot2)
library(ggpubr)

# Extract required columns
btw_nts_data_str_sal <- merged_counts[, c(1,2,17,18,33,34)]


# Convert all columns to numeric
btw_nts_data_str_sal[] <- lapply(btw_nts_data_str_sal, as.numeric)

# Check the structure of the data frame after conversion
str(btw_nts_data_str_sal)

# Specify the pairs of columns for scatter plots
btw_e13_column_pairs <- list(c("str.D12.E13C2a", "sal.D12.E13C2a"),
                             c("sal.D12.E13C2a", "FC.D12.E13C2a"),
                             c("str.D12.E13C2a", "FC.D12.E13C2a"))

library(ggplot2)
library(ggpubr)
library(dplyr)

# Create a list to store scatter plots
btw_e13_scatter_plots <- list()

# Loop through the column pairs
for (pair in btw_e13_column_pairs) {
  # Replace remaining 0 values with a small positive number (e.g., 0.1) for log transformation
  #btw_e13_transformed <- btw_nts_data_str_sal %>%
    #mutate(across(all_of(pair), ~ ifelse(. <= 0, 0.1, .)))
  
  # Create scatter plot
  btw_e13_scatter_plot <- ggscatter(btw_nts_data_str_sal, x = pair[1], y = pair[2],
                                    add = "reg.line",
                                    add.params = list(color = "blue", fill = "lightgray"),
                                    conf.int = TRUE) +
    scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x), 
                  labels = scales::trans_format("log10", scales::math_format(10^.x)),
                  limits = c(0.1, NA)) +  # Set limits to start from 0.1
    scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x), 
                  labels = scales::trans_format("log10", scales::math_format(10^.x)),
                  limits = c(0.1, NA))    # Set limits to start from 0.1
  
  # Compute correlation statistic for the current pair
  correlation_stat <- cor.test(btw_e13_transformed[[pair[1]]], btw_e13_transformed[[pair[2]]])
  cor_label <- paste("Pearson's r =", sprintf("%.3f", correlation_stat$estimate),
                     "\np =", sprintf("%.3f", correlation_stat$p.value))
  
  # Add correlation statistic to the scatter plot
  btw_e13_scatter_plot_stat <- btw_e13_scatter_plot + 
    geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +  # Add x=y line
    stat_cor(method = "pearson", 
             aes(label = cor_label),
             label.x = Inf, label.y = -Inf, 
             color = "red", 
             hjust = 1, vjust = 0)
  
  # Add the scatter plot to the list
  btw_e13_scatter_plots[[length(btw_e13_scatter_plots) + 1]] <- btw_e13_scatter_plot_stat
  
  # Print out the correlation statistic
  print(paste("Correlation statistics for", pair[1], "vs", pair[2]))
  print(correlation_stat)
}

# Arrange and display the scatter plots
ggarrange(plotlist = btw_e13_scatter_plots, ncol = 3, nrow = 1)























data <- read.table("./merge_K562_deseq_raw_norm.txt",header =T)



library(ggplot2)
library(ggpubr)

########## nts 

nt1_V_nt2.nor.cnt <- ggscatter(data, x = "norm_count_nt1_rep1", y = "norm_count_nt2_rep2",
                               add = "reg.line",  # Add regressin line
                               add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
                               conf.int = TRUE # Add confidence interval
)


nt1_V_nt2.nor.cnt <- nt1_V_nt2.nor.cnt + stat_cor(method = "pearson", 
                                                  aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
                                                  label.x = 100000, label.y = 1000000, 
                                                  color = "red"
)


nt1_V_nt2.nor.cnt <- nt1_V_nt2.nor.cnt + stat_cor(method = "pearson", aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
           label.x = 100000, label.y = 1000000, 
           color = "red")

#########
nt2_V_nt3.nor.cnt <- ggscatter(data, x = "norm_count_nt2_rep2", y = "norm_count_nt3_rep3",
                add = "reg.line",  # Add regressin line
                add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
                conf.int = TRUE # Add confidence interval
)
# Add correlation coefficient
nt2_V_nt3.nor.cnt  <- nt2_V_nt3.nor.cnt  + stat_cor(method = "pearson", aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
                                                    label.x = 1e5, label.y = 1e6, 
                                                    color = "red"
)

nt2_V_nt3.nor.cnt <- nt2_V_nt3.nor.cnt +
  scale_x_continuous(labels = scales::scientific_format(scale = 1e5)) +
  scale_y_continuous(labels = scales::scientific_format(scale = 1e5))

##########
nt1_V_nt3.nor.cnt <- ggscatter(data, x = "norm_count_nt1_rep1", y = "norm_count_nt3_rep3",
                               add = "reg.line",  # Add regressin line
                               add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
                               conf.int = TRUE # Add confidence interval
)
# Add correlation coefficient
nt1_V_nt3.nor.cnt <- nt1_V_nt3.nor.cnt  + stat_cor(method = "pearson", aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
                                                   label.x = 100000, label.y = 1000000, 
                                                   color = "red"
)

nt1_V_nt3.nor.cnt <- nt1_V_nt3.nor.cnt +
  scale_x_continuous(labels = scales::scientific_format(scale = 1e5)) +
  scale_y_continuous(labels = scales::scientific_format(scale = 1e5))

########## e13

e13.1_V_e13.2.nor.cnt <- ggscatter(data, x = "raw_count_e13_rep1", y = "norm_count_nt3_rep3",
                               add = "reg.line",  # Add regressin line
                               add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
                               conf.int = TRUE # Add confidence interval
)
# Add correlation coefficient
nt1_V_nt3.nor.cnt <- nt1_V_nt3.nor.cnt  + stat_cor(method = "pearson", aes(label = paste("p =", sprintf("%.3f", cor.test(data$norm_count_nt2_rep2, data$norm_count_nt3_rep3)$p.value))),
                                                   label.x = 100000, label.y = 1000000, 
                                                   color = "red"
)

nt1_V_nt3.nor.cnt <- nt1_V_nt3.nor.cnt +
  scale_x_continuous(labels = scales::scientific_format(scale = 1e5)) +
  scale_y_continuous(labels = scales::scientific_format(scale = 1e5))


######### arrange 
arranged_plots <- ggarrange(nt1_V_nt2.nor.cnt, nt1_V_nt3.nor.cnt,nt2_V_nt3.nor.cnt,ncol = 3, nrow = 1)
arranged_plots
#### exporting 1500 - 400 (without maintaing ratio)


##################### looping for plot 

# Assuming your data frame is named merged_df.rpm.fin
# Specify the pairs of columns for scatter plots
column_pairs <- list(c("house_nt1_k562", "men_K562_WT_1"),
                     c("house_nt2_k562", "men_K562_WT_2"),
                     c("house_nt3_k562", "men_K562_WT_3"),
                     c("house_E13_1","men_K562_ZSWIM8_KO_7"),
                     c("house_E13_2","men_K562_ZSWIM8_KO_8"),
                     c("house_E13_3", "men_K562_ZSWIM8 KO_10"))

# Create a list to store scatter plots
scatter_plots <- list()

# Loop through the column pairs
for (pair in column_pairs) {
  # Create scatter plot
  scatter_plot <- ggscatter(merged_df.rpm.fin, x = pair[1], y = pair[2],
                            add = "reg.line",
                            add.params = list(color = "blue", fill = "lightgray"),
                            conf.int = TRUE)
  
  # Add correlation statistic
  scatter_plot_stat <- scatter_plot + 
    stat_cor(method = "pearson", 
             aes(label = paste("p =", sprintf("%.3f", cor.test(merged_df.rpm.fin[[pair[1]]], merged_df.rpm.fin[[pair[2]]])$p.value))),
             label.x = 80000, label.y = 100000, color = "red")
  
  # Add the scatter plot to the list
  scatter_plots[[length(scatter_plots) + 1]] <- scatter_plot_stat
}

# Arrange and display the scatter plots
ggarrange(plotlist = scatter_plots, ncol = 3, nrow = 2)

